// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`core/Store combine correctly creates combiner if all mapped hashes exist 1`] = `
Store {
  "combiners": Object {
    "combiner": Object {
      "mapper": Object {
        "moduleA": [MockFunction],
        "moduleB": [MockFunction],
      },
      "subscriptions": Object {},
    },
    "moduleA": Object {
      "mapper": Object {
        "moduleA": [Function],
      },
      "subscriptions": Object {},
    },
    "moduleB": Object {
      "mapper": Object {
        "moduleB": [Function],
      },
      "subscriptions": Object {},
    },
  },
  "index": 0,
  "middlewares": Array [],
  "modules": Object {
    "moduleA": Object {
      "actions": Object {},
      "combiners": Array [
        "moduleA",
        "combiner",
      ],
      "mutations": Object {
        "ADD": [Function],
        "BAD": [Function],
        "DIOX_INITIALIZE": [Function],
      },
      "state": Object {
        "test": 0,
      },
    },
    "moduleB": Object {
      "actions": Object {
        "ADD": [Function],
      },
      "combiners": Array [
        "moduleB",
        "combiner",
      ],
      "mutations": Object {
        "ADD": [Function],
        "DIOX_INITIALIZE": [Function],
      },
      "state": Object {
        "test": 5,
      },
    },
  },
}
`;

exports[`core/Store constructor always correctly instanciates 1`] = `
Store {
  "combiners": Object {},
  "index": 0,
  "middlewares": Array [],
  "modules": Object {},
}
`;

exports[`core/Store register correctly registers module if hash is not already used 1`] = `
Store {
  "combiners": Object {
    "module": Object {
      "mapper": Object {
        "module": [Function],
      },
      "subscriptions": Object {},
    },
  },
  "index": 0,
  "middlewares": Array [],
  "modules": Object {
    "module": Object {
      "actions": Object {},
      "combiners": Array [
        "module",
      ],
      "mutations": Object {
        "ADD": [Function],
        "BAD": [Function],
        "DIOX_INITIALIZE": [Function],
      },
      "state": Object {
        "test": 0,
      },
    },
  },
}
`;

exports[`core/Store subscribe correctly subscribes to the given combiner if it exists 1`] = `
Store {
  "combiners": Object {
    "combiner": Object {
      "mapper": Object {
        "moduleA": [Function],
        "moduleB": [Function],
      },
      "subscriptions": Object {
        "641676f1d7d8a": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "a": 0,
                "b": Object {
                  "test": 5,
                },
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "incomplete",
              "value": undefined,
            },
          ],
        },
      },
    },
    "moduleA": Object {
      "mapper": Object {
        "moduleA": [Function],
      },
      "subscriptions": Object {},
    },
    "moduleB": Object {
      "mapper": Object {
        "moduleB": [Function],
      },
      "subscriptions": Object {},
    },
  },
  "index": 1,
  "middlewares": Array [],
  "modules": Object {
    "moduleA": Object {
      "actions": Object {},
      "combiners": Array [
        "moduleA",
        "combiner",
      ],
      "mutations": Object {
        "ADD": [Function],
        "BAD": [Function],
        "DIOX_INITIALIZE": [Function],
      },
      "state": Object {
        "test": 0,
      },
    },
    "moduleB": Object {
      "actions": Object {
        "ADD": [Function],
      },
      "combiners": Array [
        "moduleB",
        "combiner",
      ],
      "mutations": Object {
        "ADD": [Function],
        "DIOX_INITIALIZE": [Function],
      },
      "state": Object {
        "test": 5,
      },
    },
  },
}
`;

exports[`core/Store uncombine correctly uncombines the user-defined combiner if it has no more subscriptions 1`] = `
Store {
  "combiners": Object {
    "module": Object {
      "mapper": Object {
        "module": [Function],
      },
      "subscriptions": Object {},
    },
  },
  "index": 1,
  "middlewares": Array [],
  "modules": Object {
    "module": Object {
      "actions": Object {},
      "combiners": Array [
        "module",
      ],
      "mutations": Object {
        "ADD": [Function],
        "BAD": [Function],
        "DIOX_INITIALIZE": [Function],
      },
      "state": Object {
        "test": 0,
      },
    },
  },
}
`;

exports[`core/Store unregister correctly unregisters if module does not have related user-defined combiners 1`] = `
Store {
  "combiners": Object {},
  "index": 0,
  "middlewares": Array [],
  "modules": Object {},
}
`;

exports[`core/Store unsubscribe correctly unsubscribes from the given combiner if it exists 1`] = `
Store {
  "combiners": Object {
    "module": Object {
      "mapper": Object {
        "module": [Function],
      },
      "subscriptions": Object {},
    },
  },
  "index": 1,
  "middlewares": Array [],
  "modules": Object {
    "module": Object {
      "actions": Object {},
      "combiners": Array [
        "module",
      ],
      "mutations": Object {
        "ADD": [Function],
        "BAD": [Function],
        "DIOX_INITIALIZE": [Function],
      },
      "state": Object {
        "test": 0,
      },
    },
  },
}
`;

exports[`core/Store unsubscribe correctly unsubscribes several listeners from the given combiner in any order 1`] = `
Store {
  "combiners": Object {
    "module": Object {
      "mapper": Object {
        "module": [Function],
      },
      "subscriptions": Object {},
    },
  },
  "index": 2,
  "middlewares": Array [],
  "modules": Object {
    "module": Object {
      "actions": Object {},
      "combiners": Array [
        "module",
      ],
      "mutations": Object {
        "ADD": [Function],
        "BAD": [Function],
        "DIOX_INITIALIZE": [Function],
      },
      "state": Object {
        "test": 0,
      },
    },
  },
}
`;
